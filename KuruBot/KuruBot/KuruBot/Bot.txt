
----- STATE -----

XPos
YPos
XBump
YBump
Rot
RotRate
RotSleepRate

State (ingame/win/loose)
Lives
Invulnerability

----- STATE REDUCTION -----

XPos/YPos: round to 1/64e pixel
XBump/YBump: round to 1/64e pixel/frame
Rot: round to *default frame offset*=182
Rot rate: round to *default frame offset*/frame=182
RotSleepRate: no need for reduction (only two values reachable)

For position, precision could be proportionnal to the "distance to a wall".

----- STATE REDUCTION (FOR LIFE SYSTEM) -----

Invulnerability time could be rounded to 5 frames.

An optional optimisation could remember the max lives/invulnerability reached for each [state - lives/invulnerability], and reject a state if it is smaller
(prevent some go and back that are only decreasing the lives).

----- COST FUNCTION (for A*) -----

We could build a map of cost (for each position pixel), with a flooding algorithm that only consider position.
Flooding could get a little constant bonus when infiltrating into walls, and a little constant malus when leaving a wall.
It could propagate inside walls (maybe at the same speed than on ground, because it can't stay into wall forever due to lives).
(/!\ result will not be optimal)

Bonus for infiltrating walls decrease when the player loose a life (or more precisely, when the player spend invulnerability time):
at least one cost map per heart should be generated, the last one (1 heart) disallowing to start a new complete wall clip.
