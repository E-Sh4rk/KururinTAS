CODE:

PROC0     (08004104) CREATE_OBJECT

08015160: Jump to LBL0				IG FRAMES (2)
	...
	
LBL0      (08015190)
0801519A: Jump next	if ???			IG FRAMES (2)
0801519C: Jump to LBL6				? NOT REACHED YET
0801519E:							IG FRAMES (2)
080151AE: Jump next if collision (r6, see description below)	IG FRAMES (2)
080151B0: Jump to LBL6

The following block seems to handle: Timer penalties, damage, invulnerability, some physics aspects (cancel user move if collision?)
	080151B2:			 				COLLISIONS
	080151BC: Jump to LBL1 IF DAMAGE	COLLISIONS

		080151BE: 							COLLISIONS (SZ)
		080151C0: Jump to PROC1				COLLISIONS (SZ)
		080151C4: Jump to LBL2				COLLISIONS (SZ)

		080151C6: Not reached yet			? NOT REACHED YET

		LBL1	  (080151D0)				COLLISIONS (3s)
		080151D2: Jump to PROC1				COLLISIONS (3s)

	LBL2	  (080151D6)				COLLISIONS
	080151EC: Jump to LBL4 if ???		COLLISIONS

	-- LOOP START --
		080151F2
		080151F8: Jump to LBL3 if ???
		... Small jumps ...
		0801521A: Jump to PROC0
		08015224: Jump to LBL4 if ???
		08015232: Jump to LBL4 if ???
		LBL3      (08015234)
		08015238: Jump to LBL4 if ???
		08015244: Loop start if ???
	-- LOOP END --
	LBL4      (08015246)

	0801524C: Jump to LBL5 if ???
		0801524E										COLLISIONS (3s+?)
		Cancel the impact of the speed on the position of the helirin
	LBL5	  (0801525E)

	08015266: Jump to LBL7 IF INVULNERABLE
	08015268: Reached in start zone	sometimes		COLLISIONS (SZ+?) ?
	08015272: Jump to LBL7 if (Bitflag...?)
		08015274: Reached in start zone BOURRE LE BORD	COLLISIONS (SZ+?) M+
		0801528E: Jump to 08015294 if ???
			08015290: Reached in start zone BOURRE LE BORD	COLLISIONS (SZ+?) M+
		08015294
		0801529E: Jump to 080152BA if (GameMode?)
			080152A0: Add 3sec penalty (+180)				COLLISIONS (SZ+?) M+
			080152AE: Jump next if timer exceeded 215999
				080152B0: Set timer back to 215999
			080152B6: Jump to PROC0
		080152BA
		080152C2: Loose life							COLLISIONS (D)
		...
		0801530C: Jump LBL7								COLLISIONS (D)
		
	LBL6      (08015314)
	(Un)Set a flag to desactivate "damaging" state of the helirin.
	Commenting it results in keeping the "damaging" bird's face.
	...
		
LBL7      (0801531E)				IG FRAMES (2)

PROC1     (PROCEDURE 0801B258)


DATA ([3004548]! to break on change):
X				3004544         
Y				3004548
X bump				300454C
Y bump				3004550
X speed				3004554
Y speed				3004558

Fluctuate around 120 on L/R	300455C
Fluctuate around 60884 on frame	3004560
2049?				3004562
1000-0 counter (reset in zone)	3004564
counter (non null in zone/dmg)	3004566
781?				3004568
0?				300456A
8?				300456C
Input speed norm / 256		3004570

Angle				3004572
Turn rate (with bump)		3004574
Turn rate (at sleep, editable)	3004576
91?				3004578
Turn rate (with bump)		300457A
Turn rate (at sleep)		300457C
Bump count			300457E
0?				3004580
Lives				3004582
0-255 frame counter		3004584
Invulnerability timer		3004585

World number			3004420
Level number			3004421

Collision mask 1		30045D4
Collision mask 2?		30045D8

Flags...			30046B8
---- ---- ---- ---- ---- D--- ---- ----
D:Damaging (set the sprite of the face)

IWRAM		3000000
FPS			60

-------------------------------------------------------
Collision Test
Beginning: 08013D0C

lines following 08013D4A:
	r6: tile address
	r2: tile type
	r1: 3FFh
Then: AND r1 r2 (cut palette and orientation)
r1 contains tile ID
r0= r1-1

8013D54: if r0 <= 0x9E (unsigned): jump to 8013D64
	No collision -> false
8013D58: Jump to 8013D9A
8013D64:
	r0 = r1 << 5 (logical)
	r10 += r0  ->  81DA788
	r0 = 0x80
	r0 = r0 << 3   (=0x400)
	r0 = r0 & r2 (r0:orientation)
	if r0 then not r9 (mvn)
	r0 = 0x80
	r0 = r0 << 4   (=0x800)
	r2 = r0 & r2 (r2:orientation)
	if r2 then not r7 (mvn)
8013D84:
	r0 <- 7
	r2 <- r9
	r2 <- r2 & r0   (r9 & 7)
	r7 <- r7 & r0   (r7 & 7)
	r0 <- r7 << 2
	r0 <- r0 + r10  (r10: correspond to somewhere in the table of tiles)
	r0 <- [r0]      (seems to select the relevant line of the relevant tile)
	r1 <- r2 << 2
	r0 <- r0 >> r1
	r1 <- 0xF
	r0 <- r0 & r1
Then compare r0 to 0... Collision if different.

At 0x81DA7A8: table of tiles


-----------------------------------------------------------

Global description of physics:

1. Set position input speed depending on inputs
2. Decrease bump speed (for rotation and position) if relevant (see below)
3. Move depending on speed (bump+input), rotate depending on rotation rate
4. Detection of healing/ending zones
5. Compute action of springs (see dedicated file)
6. Compute collision mask (see below)
7. If collision:
	- substract input speed to position
	- modify bump speed (pos & rot) accordingly (see below) if relevant
	- if modified, apply this newly computed bump speed to position
8. If mask has collision at one of the 3 lowest bits :
	- modify bump speed (position) depending on input
	- if modified, apply this newly computed bump speed to position

-----------------------------------------------------------

r6 at 080151AE (just before collision branching)

Possible values:
5	0 0000 0000 0000 0101	(5)	INPUT. AUTO BUMP.
7	0 0000 0000 0000 0111	(7)	INPUT. NO AUTO BUMP.
A	0 0000 0000 0000 1010	(10)	INPUT. AUTO BUMP.
B	0 0000 0000 0000 1011	(11)	INPUT. AUTO BUMP
14	0 0000 0000 0001 0100	(20)	INPUT. AUTO BUMP.
28	0 0000 0000 0010 1000	(40)	NO INPUT. AUTO BUMP.
157F	0 0001 0101 0111 1111	(5503)
1583	0 0001 0101 1000 0011
5280	0 0101 0010 1000 0000	(21120)	NO INPUT. NO AUTO
8000	0 1000 0000 0000 0000
8014	0 1000 0000 0001 0100	(32788) INPUT. NO AUTO.
8050	0 1000 0000 0101 0000	(32848)	NO INPUT. NO AUTO.
A000	0 1010 0000 0000 0000
A050	0 1010 0000 0101 0000	(41040)	NO INPUT. NO AUTO.
A140	0 1010 0001 0100 0000	(41280)	NO INPUT. NO AUTO.
AA80	0 1010 1010 1000 0000
A800	0 1010 1000 0000 0000
10000	1 0000 0000 0000 0000	(65536)
14000	1 0100 0000 0000 0000
15000   1 0101 0000 0000 0000
15540   1 0101 0101 0100 0000
1555F   1 0101 0101 0100 1111
157FF	1 0101 0111 1111 1111	(88063)
1FFFF	1 1111 1111 1111 1111
...

2 most significant bits: Extermity of the helirin touched (up/down when rot=0)
Even/Odd positions: correspond to left/right
==>
Helirin separated in 17 parts

16 14 12 10 8 6 4 2 0 1 3 5 7 9 11 13 15
X--X---X---X---X---X---X---X---O---X---X---X---X---X---X---X--X

(radius of the helirin=31)

-----------------------------------------------------------

Bump values evolution:

Rotation +- 91 until default value

Position, until 0:
100 -> 75 (-25) -> 56 (-19) -> 42 (-14) -> 31 (-11) -> 23 (-8) -> 17 (-6) -> 12 (-5) -> 9 (-3) -> 6 (-3) -> 4 (-2) -> 3 -> 2 -> 1 -> 0
We add/substract ceil(abs(nb)/4)

------------------------------------------------------------

Auto bump, when collision is only at one side of the helirin:

|-o-   (G1, X=100)
AR:	-1024	1024	-1024	1024	-1204	1024	933	842	751	...
XB:	131072	130048	130560	130048	130560	130048	97536	73152	54864	...
YB:		-12800	9216	-12800	9216	-12800	-9600	-7200	-5400	...

Vector XB/YB direction depends on direction of the helirin.
-> depends on rotation of the helirin (current rotation var + rotation rate var)
XB=YB when helirin at 45° (_/_)   (-92672)
XB=0 when helirin at 0° --> YB max at 131072 (= 2 * 0x10000)
Angle rate alternate (if pos, becomes neg, and vice versa)

Bump depending on the input:

Vector XB/YB direction depends on input speed (opposite direction).
MAX: 262144 = 4*2^16
MIXED: 185344
IF NO DIRECTION, KEEP XB/YB AS IS (NO RESET). (DO NOT APPLY IT A SECOND TIME IN THE FRAME)
-----------------------------------------------------------

COS/SIN prototype

See https://gfx.developpez.com/prog-gba/sprites/

            byte angle_high = 0;
            do
            {
                int speed = 131072;//2 * 0x10000;
                int speed_high = speed >> 8;
                int cos = (int)(Math.Cos(2 * Math.PI * angle_high / 0x100) * 0x100);
                int new_speed = speed_high * cos;
                Console.WriteLine((angle_high << 8).ToString() + ": " + new_speed);
                angle_high += 1;
            }
            while (angle_high > 0) ;
            Console.ReadLine();
            return 0;